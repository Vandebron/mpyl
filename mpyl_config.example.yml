vcs:
  changedFilesPath: !ENV ${CHANGED_FILES_PATH}
  git:
    mainBranch: 'main'
    ignorePatterns: ['*.md', '*.svg']
    projectSubFolder: "deployment"
    remote:
      url: 'https://github.com/acme/repo.git'
      userName: !ENV ${GIT_CREDENTIALS_USR}
      password: !ENV ${GIT_CREDENTIALS_PSW}
      email: !ENV ${GIT_EMAIL_ADDRESS:somebody@somewhere}
  github:
    repository: 'acme/repo'
    token: !ENV ${GITHUB_TOKEN}
    app:
      privateKeyBase64Encoded: !ENV ${MPYL_GITHUB_APP_PRIVATE_KEY}
      appId: '295700'
  cachingRepository:
    mainBranch: 'main'
    remote:
      url: 'https://github.com/acme/artifact-repo.git'
      userName: !ENV ${GIT_CREDENTIALS_USR}
      password: !ENV ${GIT_CREDENTIALS_PSW}
      email: "employee@acme.com"
  argoRepository:
    mainBranch: 'main'
    remote:
      url: 'https://github.com/acme/argocd.git'
      userName: !ENV ${GIT_CREDENTIALS_USR}
      password: !ENV ${GIT_CREDENTIALS_PSW}
      email: !ENV ${GIT_EMAIL_ADDRESS}
  argoGithub:
    repository: 'acme/argocd'
    token: !ENV ${GITHUB_TOKEN}
slack:
  botToken: !ENV ${SLACK_TOKEN}
  icons:
    building: '60fps_parrot'
    success: 'thug-parrot'
    failure: 'sadparrot'
jira:
  site: 'https://acme.atlassian.net'
  userName: !ENV ${MPYL_JIRA_TOKEN_USR:jira_user}
  password: !ENV ${MPYL_JIRA_TOKEN_PSW:jira_password}
  ticketPattern: '[A-Za-z]{2,}-\d+'
docker:
  defaultRegistry: 'acme.docker.com'
  registries:
    - hostName: 'aws.amazonaws.com'
      userName: !ENV ${AWS_ACCESS_KEY_ID:user}
      password: !ENV ${AWS_SECRET_ACCESS_KEY:password}
      region: 'us-east-1'
      provider: 'aws'
    - hostName: 'acme.docker.com'
      userName: !ENV ${DOCKER_REGISTRY_USR:docker_user}
      password: !ENV ${DOCKER_REGISTRY_PSW:docker_password}
      cache:
        cacheFromRegistry: false
        custom:
          to: 'type=gha,mode=max'
          from: 'type=gha'
  build:
    rootFolder: '.'
    buildTarget: 'builder'
    testTarget: 'tester'
    dockerFileName: 'Dockerfile-mpl'
  compose:
    periodSeconds: 2
    failureThreshold: 20
jenkins:
  url: 'https://acme.infra.nl/'
  pipelines:
    some-pipeline: 'Acme Pipeline - Main'
    mpyl-test: 'MPyL Pipeline - Test'
  defaultPipeline: 'mpyl-test'
sbt:
  command: 'sbt'
  clientCommand: 'sbtn'
  testWithCoverage: !ENV ${SBT_RUN_WITH_COVERAGE:false}
  verbose: false
  javaOpts: '-Xmx4G -Xms4G -XX:+UseG1GC -XX:+CMSClassUnloadingEnabled -Xss2M'
  sbtOpts: 'user.timezone=GMT jline.terminal=jline.UnixTerminal'
  clientMode:
    build: false
    test: false
whiteLists:
  default: [ "VPN" ]
  addresses:
    - name: "VPN"
      all: [ "10.0.0.1" ]
    - name: 'Outside-World'
      all: [ '0.0.0.0/0' ]
    - name: 'K8s-Test'
      all: [ '1.2.3.0', '1.2.3.1' ]
    - name: 'TargetSpecificWhitelist'
      pr: ['1.2.3.4']
      test: ['1.2.3.4']
      acceptance: ['2.3.4.5']
      production: ['3.4.5.6']
kubernetes:
  deploymentStrategy:
    rollingUpdate:
      maxUnavailable: "25%"
      maxSurge: "25%"
    type: "RollingUpdate"
  deployAction: HelmDeploy
  defaultCluster:
    pr: 'K8S-Test'
    test: 'K8S-Test'
    acceptance: 'K8S-Acceptance'
    production: 'K8S-Production'
  clusters:
    - name: K8S-Test
      clusterId: c-acme
      projectId: p-acme
      clusterEnv: test
      context: kind-chart-testing
    - name: K8S-Acceptance
      clusterId: c-acme
      projectId: p-acme
      clusterEnv: acce
      context: acme-k8s-acce
    - name: K8S-Production
      clusterId: c-acme
      projectId: p-lb52t
      clusterEnv: prod
      context: acme-k8s-prod
project: # default values
  allowedMaintainers: [ 'Team1', 'Team2', 'MPyL' ]
  deployment:
    kubernetes:
      rancher:
        projectId:
          all: invalidId
      imagePullSecrets:
        - name: 'acme-registry'
      job:
        ttlSecondsAfterFinished:
          all: 3600
      resources:
        instances:
          pr: 1
          test: 1
          acceptance: 1
          production: 3
        limit:
          cpus:
            pr: 0.5
            test: 0.5
            acceptance: 0.5
            production: 1.0
          mem:
            pr: 1024
            test: 1024
            acceptance: 1024
            production: 2048
      startupProbe:
        path:
          all: '/health'
        initialDelaySeconds: 4  # 0 - We expect service to rarely be up within 4 secs.
        periodSeconds: 2  # 10 - We want the service to become available as soon as possible
        timeoutSeconds: 3  # 1 - If the app is very busy during the startup stage, 1 second might be too fast
        successThreshold: 1  # 1 - We want the service to become available as soon as possible
        failureThreshold: 60  # 3 - 4 + 60 * 2 = more than 2 minutes
      livenessProbe:
        path:
          all: '/health'
        periodSeconds: 30  # 10
        timeoutSeconds: 20  # 1 - Busy apps may momentarily have long timeouts
        successThreshold: 1  # 1
        failureThreshold: 3  # 3
      metrics:
        path: '/metrics'
        enabled: true
    traefik:
      enabled: true
      hosts:
        - host:
            pr: "Host(`{SERVICE-NAME}-{PR-NUMBER}.{CLUSTER-ENV}-backend.nl`)"
            test: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
            acceptance: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
            production: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
          tls:
            all: "le-custom-prod-wildcard-cert"
          insecure: false
          whitelists:
            all: [ "VPN" ]
    additionalTraefikRoutes:
      - name: "ingress-intracloud-https"
        clusterEnv:
          pr: "test-other"
          test: "test-other"
          acceptance: "acce-other"
          production: "acce-other"
        middlewares:
          - "intracloud-middleware@kubernetescrd"
        entrypoints:
          - "intracloud"
    traefikDefaults:
      httpMiddleware: "traefik-https-redirect@kubernetescrd"
      tls: "le-custom-prod-wildcard-cert"
