cvs:
  git:
    mainBranch: 'main'
  github:
    repository: 'Vandebron/mpyl'
    token: !ENV ${GITHUB_TOKEN}
    app:
      privateKeyPath: 'mpyl-pipeline.private-key.pem'
      appId: '295700'
slack:
  botToken: !ENV ${SLACK_TOKEN}
  icons:
    building: '60fpsparrot'
    success: 'thug-parrot'
    failure: 'sadparrot'
jira:
  site: 'https://atlassian.net'
  userName: !ENV ${JIRA_USER_PASSWORD_USR:jira_user}
  password: !ENV ${JIRA_USER_PASSWORD_PSW:jira_password}
docker:
  registry:
    hostName: 'bigdataregistry.azurecr.io'
    userName: !ENV ${DOCKER_REGISTRY_USR:docker_user}
    password: !ENV ${DOCKER_REGISTRY_PSW:docker_password}
  build:
    rootFolder: '.'
    buildTarget: 'builder'
    testTarget: 'tester'
    dockerFileName: 'Dockerfile-mpl'
sbt:
  command: 'sbt'
  testWithCoverage: !ENV ${SBT_RUN_WITH_COVERAGE:true}
  verbose: true
  javaOpts: '-Xmx4G -Xms4G -XX:+UseG1GC -XX:+CMSClassUnloadingEnabled -Xss2M'
  sbtOpts: 'user.timezone=GMT jline.terminal=jline.UnixTerminal'
kubernetes:
  rancher:
    cluster:
      test:
        clusterId: c-xxxxx
        projectId: p-11111
        clusterEnv: test
        context: digital-k8s-test
      acceptance:
        clusterId: c-zzzzz
        projectId: p-22222
        clusterEnv: acce
        context: digital-k8s-acce
      production:
        clusterId: c-ccccc
        projectId: p-33333
        clusterEnv: prd
        context: digital-k8s-prod
project: # default values
  deployment:
    kubernetes:
      job:
        ttlSecondsAfterFinished:
          all: 3600
        activeDeadlineSeconds:
          pr: 10
          test: 15
          acceptance: 30
          production: 50
      resources:
        instances:
          pr: 1
          test: 1
          acceptance: 1
          production: 3
        limit:
          cpus:
            pr: 0.5
            test: 0.5
            acceptance: 0.5
            production: 1.0
          mem:
            pr: 1024
            test: 1024
            acceptance: 1024
            production: 2048
      startupProbe:
        path:
          all: '/health'
        initialDelaySeconds: 4  # 0 - We expect service to rarely be up within 4 secs.
        periodSeconds: 2  # 10 - We want the service to become available as soon as possible
        timeoutSeconds: 3  # 1 - If the app is very busy during the startup stage, 1 second might be too fast
        successThreshold: 1  # 1 - We want the service to become available as soon as possible
        failureThreshold: 60  # 3 - 4 + 60 * 2 = more than 2 minutes
      livenessProbe:
        path:
          all: '/health'
        periodSeconds: 30  # 10
        timeoutSeconds: 20  # 1 - Busy apps may momentarily have long timeouts
        successThreshold: 1  # 1
        failureThreshold: 3  # 3
      metrics:
        path: '/metrics'
        enabled: true
