vcs:
  git:
    mainBranch: 'main'
    remote:
      url: 'https://github.com/acme/repo.git'
      userName: !ENV ${GIT_CREDENTIALS_USR:git-user}
      password: !ENV ${GIT_CREDENTIALS_PSW:git-password}
      email: !ENV ${GIT_EMAIL_ADDRESS:somebody@somewhere}
  github:
    repository: 'Vandebron/mpyl'
    token: !ENV ${GITHUB_TOKEN}
    app:
      privateKeyPath: 'mpyl-pipeline.private-key.pem'
      appId: '295700'
slack:
  botToken: !ENV ${SLACK_TOKEN}
  icons:
    building: '60fpsparrot'
    success: 'thug-parrot'
    failure: 'sadparrot'
jira:
  site: 'https://atlassian.net'
  userName: !ENV ${JIRA_USER_PASSWORD_USR:jira_user}
  password: !ENV ${JIRA_USER_PASSWORD_PSW:jira_password}
  ticketPattern: '[A-Za-z]{2,}-\d+'
docker:
  defaultRegistry: !ENV ${DOCKER_HOST_NAME:docker_host}
  registries:
    - hostName: !ENV ${DOCKER_HOST_NAME:docker_host}
      userName: !ENV ${DOCKER_REGISTRY_USR:docker_user}
      password: !ENV ${DOCKER_REGISTRY_PSW:docker_password}
  build:
    rootFolder: '.'
    buildTarget: 'builder'
    testTarget: 'tester'
    dockerFileName: 'Dockerfile-mpl'
sbt:
  command: 'sbt'
  clientCommand: 'sbtn'
  testWithCoverage: !ENV ${SBT_RUN_WITH_COVERAGE:true}
  verbose: true
  javaOpts: '-Xmx4G -Xms4G -XX:+UseG1GC -XX:+CMSClassUnloadingEnabled -Xss2M'
  sbtOpts: 'user.timezone=GMT jline.terminal=jline.UnixTerminal'
whiteLists:
  default: [ "VPN" ]
  addresses:
    - name: "VPN"
      all: [ "10.0.0.1" ]
    - name: 'Outside-World'
      all: [ '0.0.0.0/0' ]
    - name: 'K8s-Test'
      all: [ '1.2.3.0', '1.2.3.1' ]
    - name: 'TargetSpecificWhitelist'
      pr: [ '1.2.3.4' ]
      test: [ '1.2.3.4' ]
      acceptance: [ '2.3.4.5' ]
      production: [ '3.4.5.6' ]
kubernetes:
  deploymentStrategy:
    rollingUpdate:
      maxUnavailable: "25%"
      maxSurge: "25%"
    type: "RollingUpdate"
  defaultCluster:
    pr: 'test'
    test: 'test'
    acceptance: 'acce'
    production: 'prod'
  clusters:
    - name: 'test'
      clusterId: c-xxxxx
      clusterEnv: test
      context: digital-k8s-test
    - name: 'other-test'
      clusterEnv: test-other
      context: digital-k8s-test-other
    - name: 'acce'
      clusterId: c-zzzzz
      clusterEnv: acce
      context: digital-k8s-acce
    - name: 'prod'
      clusterId: c-ccccc
      clusterEnv: prod
      context: digital-k8s-prod
project: # default values
  allowedMaintainers: [ 'Team1', 'Team2', 'MPyL' ]
  deployment:
    traefik:
      enabled: true
      hosts:
        - host:
            pr: "Host(`{SERVICE-NAME}-{PR-NUMBER}.{CLUSTER-ENV}-backend.nl`)"
            test: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
            acceptance: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
            production: "Host(`{namespace}-{SERVICE-NAME}.{CLUSTER-ENV}-backend.nl`)"
          tls:
            all: "le-custom-prod-wildcard-cert"
          whitelists:
            all: [ "VPN" ]
          insecure: false
    additionalTraefikRoutes:
      - name: "ingress-intracloud-https"
        middlewares:
          - "intracloud-middleware@kubernetescrd"
        entrypoints:
          - "intracloud"
    traefikDefaults:
      httpMiddleware: "traefik-https-redirect@kubernetescrd"
      tls: "le-custom-prod-wildcard-cert"
    kubernetes:
      imagePullSecrets:
        - name: 'acme-registry'
      job:
        ttlSecondsAfterFinished:
          all: 3600
        activeDeadlineSeconds:
          pr: 10
          test: 15
          acceptance: 30
          production: 50
      resources:
        instances:
          pr: 1
          test: 1
          acceptance: 1
          production: 3
        limit:
          cpus:
            pr: 0.5
            test: 0.5
            acceptance: 0.5
            production: 1.0
          mem:
            pr: 1024
            test: 1024
            acceptance: 1024
            production: 2048
      startupProbe:
        path:
          all: '/health'
        initialDelaySeconds: 4  # 0 - We expect service to rarely be up within 4 secs.
        periodSeconds: 2  # 10 - We want the service to become available as soon as possible
        timeoutSeconds: 3  # 1 - If the app is very busy during the startup stage, 1 second might be too fast
        successThreshold: 1  # 1 - We want the service to become available as soon as possible
        failureThreshold: 60  # 3 - 4 + 60 * 2 = more than 2 minutes
      livenessProbe:
        path:
          all: '/health'
        periodSeconds: 30  # 10
        timeoutSeconds: 20  # 1 - Busy apps may momentarily have long timeouts
        successThreshold: 1  # 1
        failureThreshold: 3  # 3
      metrics:
        path: '/metrics'
        enabled: true
