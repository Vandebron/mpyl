name: 'sbtservice'
maintainer: ['MPyL']
stages:
  build: Sbt Build
  test: Sbt Test
  deploy: Kubernetes Deploy
mpylVersion: 1.0.10
description: 'Demonstrates how an SBT project can be built and tested'
deployment:
  namespace: 'sbtservice'
  properties:
    env:
      - key: SOME_ENV
        pr: "PullRequest"
        test: "Test"
        acceptance: "Acceptance"
        production: "Production"
    kubernetes:
      - key: SOME_SECRET_ENV
        valueFrom:
          secretKeyRef:
            name: some-secret-name
            key: sbt-job
            optional: false
  kubernetes:
    livenessProbe:
      path:
        all: /health
      successThreshold: 0
      failureThreshold: 99
    portMappings:
      8080: 8080
    resources:
      instances:
        all: 1
      limit:
        cpus:
          all: 0.5
        mem:
          all: 1024
    metrics:
      enabled: true
      alerts:
        - name: 'ServiceError'
          expr: 'true'
          forDuration: '1m'
          description: 'Service has encountered errors'
          severity: 'warning'
        - name: 'ServiceErrorCritical'
          expr: 'true'
          forDuration: '1m'
          description: 'Service has encountered critical errors'
          severity: 'critical'
  traefik:
    hosts:
      - host:
          pr: "Host(`sbtservice-{PR-NUMBER}.test.nl`)"
          test: "Host(`sbtservice.test.nl`)"
          acceptance: "Host(`sbtservice.acceptance1.nl`)"
          production: "Host(`sbtservice.nl`)"
        tls:
          all: "le-custom-prod-wildcard-cert"
        insecure: true
